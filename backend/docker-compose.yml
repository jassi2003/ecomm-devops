# version: '3.8'
# services:
#   kong-database:
#     image: postgres:13
#     container_name: kong-database
#     environment:
#       POSTGRES_USER: kong
#       POSTGRES_DB: kong
#       POSTGRES_PASSWORD: kong
#     networks:
#       - kong-net
#     ports:
#       - "5432:5432"

#   kong-migrations:
#     image: kong
#     command: kong migrations bootstrap
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: kong
#     networks:
#       - kong-net
#     depends_on:
#       - kong-database

#   kong:
#     image: kong
#     restart: always
#     container_name: kong
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: kong
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
#     networks:
#       - kong-net
#     depends_on:
#       - kong-migrations
#     ports:
#       - "8000:8000"
#       - "8443:8443"
#       - "8001:8001"
#       - "8444:8444"

# networks:
#   kong-net:
#     driver: bridge


version: '3.8'

services:
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kong-net
    ports:
      - "5432:5432"

  kong-migrations:
    image: kong
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    depends_on:
      - kong-database

  kong:
    image: kong
    restart: always
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    networks:
      - kong-net
    depends_on:
      - kong-migrations
    ports:
      - "8000:8000" #client send api  requests
      - "8443:8443" #more secured, and send api requests over https
      - "8001:8001" #admin api(http)
      - "8444:8444" #admin api(https)

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - kong-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3030:3000" 
    networks:
      - kong-net 
    volumes:
      - grafana-storage:/var/lib/grafana

networks:
  kong-net:
    driver: bridge

volumes:
  grafana-storage:





#docker-compose up -d

#grafana url: http://localhost:3030
#prometheus url:http://localhost:9090/targets
#to start minikube:minikube start
 
# docker pull kong  //localhost:8001/services
#to restart: docker-compose restart kong
# Test whether userService is running=> curl http://localhost:3000/user
# For registering the service=> curl -i -X POST "http://localhost:8001/services/" --data "name=product-service" --data "url=http://host.docker.internal:3002"
# For creating route for the service=> curl -i -X POST "http://localhost:8001/services/product-service/routes" --data "name=product-route" --data "paths[]=/prodRoute"
# Checking wheteher the route for each service is running=> curl -i http://localhost:8001/routes
# TO DELETE THE SERVICE=> curl -i -X DELETE http://localhost:8001/services/user-service
# TO RUN THE SERVICE=> >curl -i http://localhost:8000/user
  

#TO CHECK THE REGISTERED SERVICES: curl -X GET http://localhost:8001/services | jq
#TO CHECK THE REGISTERED ROUTES: curl -X GET http://localhost:8001/routes | jq

